/*  let [connected,setConnected] = useState(null);
  const [dato, setDato] = useState(0);
  var bleService = '19b10000-e8f2-537e-4f6c-d104768a1214';
  var ledCharacteristic = '19b10002-e8f2-537e-4f6c-d104768a1214';
  var sensorCharacteristic= '19b10001-e8f2-537e-4f6c-d104768a1214';

     
    const handleCharacteristicValueChanged = (event) => {
      setDato(event.target.value.getUint8(0));
      const newValueReceived = new TextDecoder().decode(event.target.value);
      console.log("Valor de caracteristicas cambio: ", newValueReceived);
    }

  const connectBluetooth = async () => {
  try {
    
    device = await navigator.bluetooth.requestDevice(
    {
          / filters:[{
              name: deviceName,
              services: [bleService]
          }], *
          acceptAllDevices: true
      }
  );
  console.log("Dispositivo requerido")
  server = await device.gatt.connect();
  setConnected('flexseal')
  console.log("Servicio encontrado:", service);

  service = await server.getPrimaryService(bleService)
  console.log('obtener servicio');
  console.log(service)
  characteristic = await service.getCharacteristic(sensorCharacteristic);
  characteristic.startNotifications();
  
  
  data = await characteristic.readValue();

  var decoder = new TextDecoder().decode(data);
  console.log(decoder);
  setDato(decoder);
  characteristic2 = await service.getCharacteristic(ledCharacteristic)
  characteristic2.startNotifications();

}catch(error) {
  console.log(`El error es: ${error}`)
  }
  
}

async function BLEdisconnect(){
  console.log("Bluetooth desconectado")
  return server.disconnect();
}

async function writeData(value){
  if(server && server.connected){  
  const data = new Uint8Array([value]);
  return characteristic2.writeValue(data)
  }
  else{
    console.log("Conecte su dispositivo");
  }
}

return (
  <div className="Appheader"> 

    <h2>ESP32 Wifi Setup</h2>

    <hr className='hr'></hr>
    {dato}
    <div className='containerBle'>
      <button className='button' id="ble" onClick={() => connectBluetooth()}>Connect Bluetooth</button>
        <button onClick={() => BLEdisconnect()}>Disconnect</button>
      <br />
      <label>Connected to: {connected}</label>
    </div>
    <button onClick={() => writeData(1)}>ON</button>
    <button onClick={() => writeData(0)}> OFF</button>

</div>
); */

/* 
Este codigo funciona pero no en smartphones
try{

    if(server && server.connected){  
      const data = new Uint8Array([value]);
      alert("Data : " + data );
      return characteristic2.writeValue(data)
    }
    else{
      console.log("Conecte su dispositivo");
    }
  }catch(error){
    console.log(error);
  } */